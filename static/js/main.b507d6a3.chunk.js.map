{"version":3,"sources":["icons/global-warming.svg","components/EnterCity.js","components/Map.js","components/Card1Day.js","components/Card7Days/Card7Days.js","components/LocAndTime.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EnterCity","state","name","age","multiline","handleChange","event","_this","setState","Object","defineProperty","target","value","getInput","this","props","react_default","a","createElement","onSubmit","noValidate","autoComplete","TextField_default","type","id","label","onChange","margin","Button_default","React","Component","google","window","withScriptjs","withGoogleMap","_ref","getInfo","lat","lng","cityName","country","lib","onClick","defaultZoom","center","MarkerWithLabel_default","position","labelAnchor","maps","Point","labelStyle","fontSize","fontWeight","backgroundColor","color","padding","borderRadius","withStyles","card","media","height","classes","date","sunrise","sunset","maxtemp_c","numberDays","localTime","isLoading","mintemp_c","text","iconUrl","forecastDays","Card_default","className","moment","format","width","src","alt","map","el","CardActionArea_default","CardContent_default","Typography_default","gutterBottom","variant","component","day","condition","icon","maxWidth","image","CardMedia_default","title","NavBar","AppBar_default","Toolbar_default","API_URL","IMAGE_KEY","App","showing7Days","long","getInfoMapClick","e","latLng","URL","concat","axios","get","then","res","data","location","lon","localtime","current","forecast","forecastday","astro","catch","err","console","error","updateWeatherAndImage","_this$state","UpWeather","UpImg","Promise","all","hits","Math","floor","random","length","largeImageURL","ShowWeather","cityNameUpdate","preventDefault","city","_this2","_this3","_this$state2","updateWeather","searchImages","_this$state3","precip","maxwind_kph","Fragment","react_loader_spinner_default","textShadow","components_AppBar","components_EnterCity","style","components_LocAndTime","components_Map","googleMapURL","loadingElement","containerElement","mapElement","components_Card1Day","href","components_Card7Days_Card7Days","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b507d6a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/global-warming.74c2d507.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass EnterCity extends React.Component {\r\n  state = {\r\n    name: 'Enter city name',\r\n    age: '',\r\n    multiline: 'Controlled',\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({ [name]: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { getInput } = this.props;\r\n\r\n    return (\r\n      <form onSubmit={getInput}  noValidate autoComplete=\"off\">\r\n        <TextField\r\n        type=\"text\" name=\"city\"\r\n          id=\"standard-name\"\r\n          label=\"City\"\r\n          onChange={this.handleChange('name')}\r\n          margin=\"normal\"\r\n        />\r\n        <Button\r\n        type=\"submit\" \r\n        >show weather</Button>\r\n        </form>\r\n    );\r\n  }\r\n}\r\n\r\nEnterCity.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default EnterCity;\r\n","import React from \"react\";\r\nimport { withScriptjs, withGoogleMap, GoogleMap } from \"react-google-maps\";\r\n\r\nimport MarkerWithLabel from \"react-google-maps/lib/components/addons/MarkerWithLabel\";\r\n\r\nconst google = (window.google = window.google ? window.google : {});\r\n\r\nconst Map = ({ getInfo, lat, lng, cityName, country }) => (\r\n\r\n  <GoogleMap\r\n    onClick={getInfo}\r\n    defaultZoom={10}\r\n    center={{ lat: lat, lng: lng }}\r\n  >\r\n    <MarkerWithLabel\r\n      position={{ lat: lat, lng: lng }}\r\n      labelAnchor={new google.maps.Point(0, 0)}\r\n      labelStyle={{\r\n        fontSize: \"1.3rem\",\r\n        fontWeight: \"700\",\r\n        backgroundColor: \"white\",\r\n        color: \"black\",\r\n        padding: \"0.3rem 0.5rem 0.2rem\",\r\n        borderRadius: \"30px\"\r\n      }}\r\n    >\r\n      <div>\r\n        {cityName ? cityName : \"Somewhere on\"},\r\n       {country ? country : \"Planet Earth\"}\r\n      </div>\r\n    </MarkerWithLabel>\r\n  </GoogleMap>\r\n\r\n);\r\n\r\nexport default withScriptjs(withGoogleMap(Map));\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport \"./Card1Day.css\";\r\nimport moment from \"moment\";\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nconst styles = {\r\n    card: {\r\n    },\r\n    media: {\r\n      height: 140,\r\n    },\r\n  };\r\n  \r\n  function Card1Day(props) {\r\n    const { classes, date, sunrise, sunset, cityName, numberDays, localTime, isLoading, maxtemp_c, mintemp_c, text, iconUrl, forecastDays } = props;\r\n    return (\r\n      <Card className={classes.card}>\r\n          \r\n        <div className=\"card1dayMain\">\r\n         <div className=\"card1dayFlex\">\r\n             <div>\r\n                 <h1>{cityName}</h1>\r\n             <h4>{moment(date).format('dddd')}</h4>\r\n             <h4>{moment(date).format('ll')}</h4>\r\n                 <div className=\"half1Card\">\r\n                     <div>\r\n                         <h4>{text}</h4>\r\n                         <img width=\"100px\" src={iconUrl} alt=\"weather\" />\r\n                     </div>\r\n                     <div>\r\n                         <p>Day: {maxtemp_c}°C</p>\r\n                         <p>Night: {mintemp_c}°C</p>\r\n                         <p>Sunrise: {sunrise}</p>\r\n                         <p>Sunset: {sunset}</p>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n         </div>\r\n     </div>\r\n\r\n        \r\n      </Card>\r\n    );\r\n  }\r\n  \r\n  Card1Day.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n  };\r\n  \r\n  export default withStyles(styles)(Card1Day);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// let Card1Day = ({ date, sunrise, sunset, cityName, numberDays, localTime, isLoading, maxtemp_c, mintemp_c, text, iconUrl, forecastDays }) => (<>\r\n//     <div className=\"card1dayMain\">\r\n//         <div className=\"card1dayFlex\">\r\n//             <div>\r\n//                 <h1>{cityName}</h1>\r\n//             <h4>{moment(date).format('dddd')}</h4>\r\n//             <h4>{moment(date).format('ll')}</h4>\r\n//                 <div className=\"half1Card\">\r\n//                     <div>\r\n//                         <h4>{text}</h4>\r\n//                         <img width=\"100px\" src={iconUrl} alt=\"weather\" />\r\n//                     </div>\r\n//                     <div>\r\n//                         <p>Day: {maxtemp_c}°C</p>\r\n//                         <p>Night: {mintemp_c}°C</p>\r\n//                         <p>Sunrise: {sunrise}</p>\r\n//                         <p>Sunset: {sunset}</p>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     </div></>\r\n// )\r\n// export default Card1Day;\r\n","import React from 'react';\r\nimport \"./Card7Days.css\";\r\nimport moment from \"moment\";\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n    media: {\r\n        height: 140,\r\n    },\r\n};\r\n\r\nfunction Card7Days(props) {\r\n    const { forecastDays } = props;\r\n    return (\r\n        <div className=\"flex7days\">\r\n            {forecastDays.map(el => (\r\n\r\n                <div className=\"oneCard\">\r\n\r\n                    <CardActionArea>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h6\">\r\n                                {moment(el.date).format('ddd')}\r\n                            </Typography>\r\n                            <Typography component=\"p\">\r\n                                {moment(el.date).format('ll')}\r\n                            </Typography>\r\n\r\n                            <img src={el.day.condition.icon} alt=\"weather\" />\r\n\r\n\r\n                            <Typography component=\"p\">\r\n                                {el.day.condition.text}\r\n                            </Typography>\r\n                            <Typography component=\"p\">\r\n                                {el.day.maxtemp_c}°C     \r\n                                 </Typography>\r\n                        </CardContent>\r\n                    </CardActionArea>\r\n                </div>\r\n            ))\r\n            }\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nCard7Days.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(Card7Days);\r\n\r\n","import React from 'react';\r\nimport moment from \"moment\";\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nconst styles = {\r\n    card: {\r\n        maxWidth: 225,\r\n        margin: 15,\r\n    },\r\n    media: {\r\n      height: 140,\r\n    },\r\n};\r\n\r\nfunction LocAndTime(props) {\r\n    const { classes, cityName,image, localTime } = props;\r\n    return (\r\n        <Card className={classes.card}>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={image}\r\n                    title=\"Contemplative Reptile\"\r\n                />\r\n                <CardContent>\r\n                    <Typography component=\"p\">\r\n                        {cityName}\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        {moment(localTime).format('dddd')}\r\n                    </Typography>\r\n                    <Typography component=\"p\">\r\n                        {moment(localTime).format('LT')}\r\n                    </Typography>\r\n                </CardContent>\r\n\r\n        </Card>\r\n    );\r\n}\r\n\r\nLocAndTime.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(LocAndTime);\r\n\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport ToolBar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport icon from '../icons/global-warming.svg'\r\n\r\n\r\nconst NavBar = () => (\r\n\r\n  <div>\r\n    <AppBar position=\"static\">\r\n      <ToolBar>\r\n      <img src={icon} width=\"50px\" alt=\"logo\"/>\r\n        <Typography variant=\"title\" color=\"inherit\">\r\n          MyWeather\r\n            </Typography>\r\n      </ToolBar>\r\n    </AppBar>\r\n  </div>\r\n)\r\nexport default NavBar;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport EnterCity from \"./components/EnterCity\";\nimport Map from \"./components/Map\";\nimport Card1Day from \"./components/Card1Day\";\nimport Card7Days from \"./components/Card7Days/Card7Days\";\nimport Loader from \"react-loader-spinner\";\nimport LocAndTime from \"./components/LocAndTime\";\nimport AppBar from \"./components/AppBar\";\n\nconst API_URL = \"https://api.apixu.com/v1/forecast.json?key=229bbedfd358402289383456192204\";\nconst IMAGE_KEY = \"12292065-237546a1a299f2c430ac14530\";\n\nclass App extends Component {\n  state = {\n    cityName: \"Kiev\",\n    numberDays: 7,\n    localTime: \"\",\n    isLoading: true,\n    showing7Days: false,\n    lat: 50.5,\n    long: 30.5,\n    country: \"Ukraine\",\n\n  }\n\n  searchImages() {\n    const { cityName } = this.state;\n    const URL = `https://pixabay.com/api/?key=${IMAGE_KEY}&q=${cityName}`;\n\n    axios.get(URL)\n      .then(res => res.data)\n      .then(data => {\n        this.setState({ image: data.hits[Math.floor(Math.random() * Math.floor(data.hits.length))].largeImageURL })\n      })\n  }\n\n  getInfoMapClick = e => {\n    let lat = e.latLng.lat();\n    let long = e.latLng.lng();\n    const { numberDays } = this.state;\n    const URL = `${API_URL}&q=${lat}, ${long}&days=${numberDays}`;\n    axios.get(URL)\n      .then(res => res.data)\n      .then(data => {\n        this.setState({\n          cityName: data.location.name,\n          lat: data.location.lat,\n          long: data.location.lon,\n          country: data.location.country,\n          isLoading: false,\n          localTime: data.location.localtime,\n          text: data.current.condition.text,\n          forecastDays: data.forecast.forecastday,\n          maxtemp_c: data.forecast.forecastday[0].day.maxtemp_c,\n          mintemp_c: data.forecast.forecastday[0].day.mintemp_c,\n          sunrise: data.forecast.forecastday[0].astro.sunrise,\n          sunset: data.forecast.forecastday[0].astro.sunset,\n          iconUrl: data.forecast.forecastday[0].day.condition.icon,\n          date: data.forecast.forecastday[0].date,\n        }\n        );\n\n      })\n      .catch(err => {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err)\n      })\n\n  };\n\n  updateWeather() {\n    const { numberDays, cityName } = this.state;\n    const URL = `${API_URL}&q=${cityName}&days=${numberDays}`;\n    axios.get(URL)\n      .then(res => res.data)\n      .then(data => {\n        this.setState({\n          cityName: data.location.name,\n          lat: data.location.lat,\n          long: data.location.lon,\n          country: data.location.country,\n          isLoading: false,\n          localTime: data.location.localtime,\n          text: data.current.condition.text,\n          forecastDays: data.forecast.forecastday,\n          maxtemp_c: data.forecast.forecastday[0].day.maxtemp_c,\n          mintemp_c: data.forecast.forecastday[0].day.mintemp_c,\n          sunrise: data.forecast.forecastday[0].astro.sunrise,\n          sunset: data.forecast.forecastday[0].astro.sunset,\n          iconUrl: data.forecast.forecastday[0].day.condition.icon,\n          date: data.forecast.forecastday[0].date,\n        })\n      })\n  };\n\n\n  updateWeatherAndImage = () => {\n\n    const { numberDays, cityName } = this.state;\n    const UpWeather = axios.get(`${API_URL}&q=${cityName}&days=${numberDays}`);\n    const UpImg = axios.get(`https://pixabay.com/api/?key=${IMAGE_KEY}&q=${cityName}`);\n\n    Promise.all([UpWeather, UpImg])\n      .then(res => {\n        this.setState({\n          cityName: res[0].data.location.name,\n          lat: res[0].data.location.lat,\n          long: res[0].data.location.lon,\n          country: res[0].data.location.country,\n          isLoading: false,\n          localTime: res[0].data.location.localtime,\n          text: res[0].data.current.condition.text,\n          forecastDays: res[0].data.forecast.forecastday,\n          maxtemp_c: res[0].data.forecast.forecastday[0].day.maxtemp_c,\n          mintemp_c: res[0].data.forecast.forecastday[0].day.mintemp_c,\n          sunrise: res[0].data.forecast.forecastday[0].astro.sunrise,\n          sunset: res[0].data.forecast.forecastday[0].astro.sunset,\n          iconUrl: res[0].data.forecast.forecastday[0].day.condition.icon,\n          date: res[0].data.forecast.forecastday[0].date,\n          image: res[1].data.hits[Math.floor(Math.random() * res[1].data.hits.length)].largeImageURL\n        }\n        );\n\n      })\n      .catch(err => {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err)\n      })\n\n  };\n\n  ShowWeather = () => {\n    let { showing7Days } = this.state;\n    this.setState({ showing7Days: !showing7Days })\n  }\n\n  cityNameUpdate = (e) => {\n    e.preventDefault();\n    this.setState({\n      cityName: e.target.city.value\n    }, () => this.updateWeatherAndImage(this.state.cityName));\n    e.target.city.value = \"\";\n\n  }\n\n  componentDidMount() {\n    this.updateWeather();\n    this.searchImages();\n  }\n  render() {\n    const { lat, image, long, country, showing7Days, date, forecastDays, sunrise, precip, maxwind_kph, sunset, cityName, numberDays, localTime, isLoading, maxtemp_c, mintemp_c, text, iconUrl } = this.state;\n    return <>\n      {isLoading ? <div className=\"loader\">\n        <div className=\"wrapLoader\"><Loader type=\"Circles\" textShadow=\"0px 1px 0px #528009\" color=\"white\" height={80} width={80} /></div>\n      </div> :\n        <div className=\"App\">\n          <AppBar />\n          <div className=\"enterCity\">\n            <EnterCity getInput={this.cityNameUpdate} />\n          </div>\n          <div className=\"flexCardMap\">\n            <div style={{ width: \"375px\", margin: \"15px\" }}>\n              <LocAndTime image={image} localTime={localTime} date={date} cityName={cityName} />\n            </div>\n            <div style={{ width: \"375px\" }}>\n              <Map\n                lat={lat}\n                lng={long}\n                cityName={cityName}\n                country={country}\n                getInfo={this.getInfoMapClick}\n                googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAEV5hm-_7AqHTdPCrmjbFLY1bQkvEGpK0\"\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `275px` }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n              /></div>\n          </div>\n\n          <Card1Day\n            sunrise={sunrise}\n            sunset={sunset}\n            precip={precip}\n            maxwind_kph={maxwind_kph}\n            cityName={cityName}\n            date={date}\n            text={text}\n            maxtemp_c={maxtemp_c}\n            mintemp_c={mintemp_c}\n            iconUrl={iconUrl}\n          />\n          <a href=\"#\" className=\"myButton\" onClick={this.ShowWeather}>Weeks weather</a>\n          {showing7Days && <Card7Days forecastDays={forecastDays} />}\n        </div>\n      }\n    </>\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}